rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId || isAdmin();
    }

    // Questions collection
    match /questions/{questionId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }

    // Leaderboards collection
    match /leaderboards/{document=**} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.uid == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    // MVP document
    match /mvp/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // Rooms collection
    match /rooms/{roomId} {
      // Allow users to read room data if they're authenticated
      allow read: if isAuthenticated();
      
      // Allow creating a room if the user is authenticated
      allow create: if isAuthenticated() && 
        request.resource.data.hostId == request.auth.uid &&
        request.resource.data.status == 'waiting';
      
      // Allow updating a room if the user is the host or joining as a player
      allow update: if isAuthenticated() && (
        // Host can update room status and current question
        (request.auth.uid == resource.data.hostId && 
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'currentQuestion', 'currentQuestionIndex'])) ||
        
        // Players can join the room by adding themselves to the players array
        (request.resource.data.players.hasAll([request.auth.uid]) &&
         request.resource.data.status == 'waiting')
      );
      
      // Host can delete the room
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.hostId;
    }
    
    // Games collection (for completed games history)
    match /games/{gameId} {
      allow read: if isAuthenticated() && 
        (resource.data.players.hasAny([request.auth.uid]) || isAdmin());
      allow create: if isAuthenticated();
    }
  }
}
